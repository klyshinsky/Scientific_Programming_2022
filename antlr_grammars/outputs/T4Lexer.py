# Generated from T4.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


import math

def make_op(stack, op):
    if op == '*': 
        stack[-2] *= stack[-1] 
    elif op == '/':
        stack[-2] /= stack[-1]
    elif op == '+':
        stack[-2] += stack[-1]
    elif op == '-':
        stack[-2] -= stack[-1]

    stack.pop()
    print(op)


def serializedATN():
    return [
        4,0,13,73,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,4,8,54,8,8,11,8,12,8,55,1,9,
        1,9,5,9,60,8,9,10,9,12,9,63,9,9,1,10,4,10,66,8,10,11,10,12,10,67,
        1,11,1,11,1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,1,0,6,1,0,48,57,2,0,65,90,97,122,3,0,48,
        57,65,90,97,122,3,0,9,10,13,13,32,32,2,0,43,43,45,45,2,0,42,42,47,
        47,75,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,31,1,0,0,
        0,5,33,1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,43,1,0,0,0,13,48,1,0,
        0,0,15,50,1,0,0,0,17,53,1,0,0,0,19,57,1,0,0,0,21,65,1,0,0,0,23,69,
        1,0,0,0,25,71,1,0,0,0,27,28,5,105,0,0,28,29,5,110,0,0,29,30,5,116,
        0,0,30,2,1,0,0,0,31,32,5,44,0,0,32,4,1,0,0,0,33,34,5,59,0,0,34,6,
        1,0,0,0,35,36,5,61,0,0,36,8,1,0,0,0,37,38,5,98,0,0,38,39,5,114,0,
        0,39,40,5,101,0,0,40,41,5,97,0,0,41,42,5,107,0,0,42,10,1,0,0,0,43,
        44,5,112,0,0,44,45,5,111,0,0,45,46,5,119,0,0,46,47,5,40,0,0,47,12,
        1,0,0,0,48,49,5,41,0,0,49,14,1,0,0,0,50,51,5,40,0,0,51,16,1,0,0,
        0,52,54,7,0,0,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,
        1,0,0,0,56,18,1,0,0,0,57,61,7,1,0,0,58,60,7,2,0,0,59,58,1,0,0,0,
        60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,20,1,0,0,0,63,61,1,
        0,0,0,64,66,7,3,0,0,65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,
        68,1,0,0,0,68,22,1,0,0,0,69,70,7,4,0,0,70,24,1,0,0,0,71,72,7,5,0,
        0,72,26,1,0,0,0,4,0,55,61,67,0
    ]

class T4Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    INT = 9
    ID = 10
    WS = 11
    OP_ADD = 12
    OP_MUL = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "','", "';'", "'='", "'break'", "'pow('", "')'", "'('" ]

    symbolicNames = [ "<INVALID>",
            "INT", "ID", "WS", "OP_ADD", "OP_MUL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "INT", "ID", "WS", "OP_ADD", "OP_MUL" ]

    grammarFileName = "T4.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    values = {}


